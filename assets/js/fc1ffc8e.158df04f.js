"use strict";(self.webpackChunkorbits_doc=self.webpackChunkorbits_doc||[]).push([[1347],{569:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/workflow-a6c06fbf3b7701ff3ddb4cd891038c19.png"},6727:e=>{e.exports=JSON.parse('{"permalink":"/blog/orchestration-typescript","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-08-05-orchestration-in-typescript.md","source":"@site/blog/2025-08-05-orchestration-in-typescript.md","title":"A deployment workflow with TypeScript","description":"In modern platform engineering, building a developer self-service portal isn\u2019t just about provisioning \u2014 it\u2019s about ensuring the entire golden path reliably completes, from infrastructure to runtime configuration.","date":"2025-08-05T00:00:00.000Z","tags":[{"inline":true,"label":"orchestration","permalink":"/blog/tags/orchestration"},{"inline":true,"label":"self-adaptive platform","permalink":"/blog/tags/self-adaptive-platform"},{"inline":true,"label":"drift-detection","permalink":"/blog/tags/drift-detection"},{"inline":true,"label":"automation","permalink":"/blog/tags/automation"},{"inline":false,"label":"OrbiTS","permalink":"/blog/tags/orbits","description":"Posts related to OrbiTS"},{"inline":true,"label":"workflow","permalink":"/blog/tags/workflow"}],"readingTime":2.42,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc D\xe9champs","title":"CTO @ Webcapsule","url":"https://github.com/ldechamps","page":{"permalink":"/blog/authors/loic"},"socials":{"linkedin":"https://www.linkedin.com/in/loicdechamps/","github":"https://github.com/ldechamps"},"imageURL":"/img/authors/loic.png","key":"loic"}],"frontMatter":{"slug":"orchestration-typescript","title":"A deployment workflow with TypeScript","authors":["loic"],"tags":["orchestration","self-adaptive platform","drift-detection","automation","orbits","workflow"]},"unlisted":false,"prevItem":{"title":"Write your CI/CD in TypeScript","permalink":"/blog/ci-cd-in-typescript"},"nextItem":{"title":"Why orchestration matters?","permalink":"/blog/why-orchestration-matters"}}')},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(6540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}},8586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var r=n(6727),i=n(4848),o=n(8453);const a={slug:"orchestration-typescript",title:"A deployment workflow with TypeScript",authors:["loic"],tags:["orchestration","self-adaptive platform","drift-detection","automation","orbits","workflow"]},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Example: deploying a backend from scratch",id:"example-deploying-a-backend-from-scratch",level:2},{value:"A Simple declarative workflow in TypeScript",id:"a-simple-declarative-workflow-in-typescript",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Inheritance and code reuse",id:"inheritance-and-code-reuse",level:4},{value:"TypeScript ecosystem",id:"typescript-ecosystem",level:4},{value:"Test on local",id:"test-on-local",level:4},{value:"Going further",id:"going-further",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["In modern platform engineering, building a developer self-service portal isn\u2019t just about provisioning \u2014 it\u2019s about ensuring the entire ",(0,i.jsx)(t.a,{href:"https://www.redhat.com/en/topics/platform-engineering/golden-paths",children:"golden path"})," reliably completes, from infrastructure to runtime configuration.\nWhether you're spinning up environments for feature previews or onboarding a new client, orchestration is ",(0,i.jsx)(t.a,{href:"https://platformengineering.org/blog/why-your-internal-developer-platform-needs-a-backend",children:"the logic that holds everything together"})," \u2014 especially when things go wrong.\nYour orchestrator should let you observe state transitions and trigger specific commands accordingly\u2014whether it's provisioning, reconciling drift, or handling failures."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"workflow",src:n(569).A+"",width:"1000",height:"416"})}),"\n",(0,i.jsx)(t.h2,{id:"example-deploying-a-backend-from-scratch",children:"Example: deploying a backend from scratch"}),"\n",(0,i.jsx)(t.p,{children:"Let\u2019s walk through a typical use case for an agency or SaaS company: deploying a new backend environment for a client or project. This often involves:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Creating a dedicated cloud account"}),"\n",(0,i.jsx)(t.li,{children:"Creating a Git repository"}),"\n",(0,i.jsx)(t.li,{children:"Deploying infrastructure-as-code (e.g., CDK or Terraform)"}),"\n",(0,i.jsx)(t.li,{children:"Running SQL migrations in the target environment"}),"\n",(0,i.jsx)(t.li,{children:"Notifying the team of success or failure"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s how you would orchestrate that using Orbits:"}),"\n",(0,i.jsx)(t.h3,{id:"a-simple-declarative-workflow-in-typescript",children:"A Simple declarative workflow in TypeScript"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export class DeployBackend extends Workflow {\n    async define() {\n        try {\n            // Step 1: Create Git and Cloud resources in parallel\n            const createGit = new CreateGitRepo();\n            const createAWS = new CreateAWSAccount();\n\n            await Promise.all([\n                this.do('git-create', createGit),\n                this.do('aws-create', createAWS),\n            ]);\n\n            // Step 2: Deploy Infrastructure-as-Code\n            const deploymentOutput = await this.do(\n                'iac-deploy',\n                new DeployCDKStack()\n            );\n\n            // Step 3: Run SQL migrations inside the newly provisioned environment\n            const migration = new RunSQLMigrations();\n            migration.executor = new CloudExecutor(deploymentOutput.env);\n            await this.do('sql-migrate', migration);\n        } catch (err) {\n            // Step 4: Handle errors with a notification\n            await this.do(\n                'notify-slack',\n                new SendSlackAlert().setArgument(err)\n            );\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"advantages",children:"Advantages"}),"\n",(0,i.jsx)(t.h4,{id:"inheritance-and-code-reuse",children:"Inheritance and code reuse"}),"\n",(0,i.jsx)(t.p,{children:"When managing multiple services (e.g., backend, frontend, authentication), it's common to share infrastructure logic\u2014like creating a Git repository or provisioning a cloud account."}),"\n",(0,i.jsx)(t.p,{children:"Orbits makes this easy by allowing you to extract shared logic into a base class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export class BaseWorkflow extends Workflow {\n    defineCreation() {\n        const createGit = new CreateGitRepo();\n        const createAWS = new CreateAWSAccount();\n\n        await Promise.all([\n            this.do('git-create', createGit),\n            this.do('aws-create', createAWS),\n        ]);\n    }\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"You can then extend this base in specific workflows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export class FrontendWorkflow extends BaseWorkflow {\n    // Additional frontend-specific steps\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"By properly modeling shared resources, you can also ensure that different services (like frontend and backend) reuse the same AWS account rather than creating duplicates."}),"\n",(0,i.jsx)(t.h4,{id:"typescript-ecosystem",children:"TypeScript ecosystem"}),"\n",(0,i.jsx)(t.p,{children:"Since Orbits is written in TypeScript, you can directly use SDKs from your providers (like the AWS SDK).\nFor example, in order to create an AWS account, you can just call:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const client = new OrganizationsClient();\nclient.send(\n    new CreateAccountCommand({\n        AccountName: name,\n        Email: email,\n    })\n);\n"})}),"\n",(0,i.jsx)(t.h4,{id:"test-on-local",children:"Test on local"}),"\n",(0,i.jsx)(t.p,{children:"All the orchestrator run inside your node.js process.\nAs a consequence, you can run and test your workflows locally, just like any other TypeScript code \u2014 enabling fast iteration and simplified debugging during development."}),"\n",(0,i.jsx)(t.h3,{id:"going-further",children:"Going further"}),"\n",(0,i.jsx)(t.p,{children:"Want to go further and orchestrate multiple tenants or environments? Check out our next post on managing a fleet of stacks with Orbits."})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);