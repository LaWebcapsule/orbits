"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[850],{1222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"main-documentation/core-concepts/action-in-depth","title":"Action lifecycle","description":"An action has a lifecycle that starts when the action is saved in the database. Then, Orbits takes care of the different states and calls the appropriate function when needed, with correct locks and timeouts.","source":"@site/docs/main-documentation/core-concepts/action-in-depth.md","sourceDirName":"main-documentation/core-concepts","slug":"/main-documentation/core-concepts/action-in-depth","permalink":"/orbits/docs/main-documentation/core-concepts/action-in-depth","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1.1,"frontMatter":{"title":"Action lifecycle","sidebar_position":1.1},"sidebar":"tutorialSidebar","previous":{"title":"Action","permalink":"/orbits/docs/main-documentation/core-concepts/action"},"next":{"title":"Workflow","permalink":"/orbits/docs/main-documentation/core-concepts/workflow"}}');var c=n(4848),i=n(8453);const s={title:"Action lifecycle",sidebar_position:1.1},a="Action lifecycle",d={},r=[{value:"The <code>resume</code> method",id:"the-resume-method",level:2},{value:"The <code>init</code> method",id:"the-init-method",level:2},{value:"The <code>main</code> method",id:"the-main-method",level:2},{value:"The <code>watcher</code> method",id:"the-watcher-method",level:2},{value:"<code>ActionState.SLEEPING</code>",id:"actionstatesleeping",level:3},{value:"<code>ActionState.EXECUTING_MAIN</code>",id:"actionstateexecuting_main",level:3},{value:"<code>ActionState.IN_PROGRESS</code>",id:"actionstatein_progress",level:3},{value:"<code>ActionState.SUCCESS</code>",id:"actionstatesuccess",level:3},{value:"<code>ActionState.ERROR</code>",id:"actionstateerror",level:3},{value:"<code>ActionState.CLOSED</code>",id:"actionstateclosed",level:3}];function h(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"action-lifecycle",children:"Action lifecycle"})}),"\n",(0,c.jsx)(t.p,{children:"An action has a lifecycle that starts when the action is saved in the database. Then, Orbits takes care of the different states and calls the appropriate function when needed, with correct locks and timeouts."}),"\n",(0,c.jsxs)(t.p,{children:["A standard flow would be the following.",(0,c.jsx)(t.br,{}),"\n",(0,c.jsx)(t.img,{alt:"standard_flow",src:n(8708).A+"",width:"1372",height:"241"})]}),"\n",(0,c.jsxs)(t.blockquote,{children:["\n",(0,c.jsxs)(t.p,{children:["In some special cases, you can customize this flow to better fit your need. For example, the ",(0,c.jsx)(t.code,{children:"watcher"})," can emit an ",(0,c.jsx)(t.code,{children:"ActionState.SLEEPING"})," to return at the beginning of the flow. Make sure you understand what this implies before doing it."]}),"\n"]}),"\n",(0,c.jsx)(t.h1,{id:"methods-to-manage-the-state-of-an-action",children:"Methods to manage the state of an action"}),"\n",(0,c.jsxs)(t.h2,{id:"the-resume-method",children:["The ",(0,c.jsx)(t.code,{children:"resume"})," method"]}),"\n",(0,c.jsxs)(t.p,{children:["Each action has a ",(0,c.jsx)(t.code,{children:"resume"})," method. This method calls the appropriate flow and functions corresponding to the action state. You can use it if you want to manually update or check for updates to the state of an action.",(0,c.jsx)(t.br,{}),"\n","This ",(0,c.jsx)(t.code,{children:"resume"})," property is called at a regular rate by cron jobs."]}),"\n",(0,c.jsxs)(t.h2,{id:"the-init-method",children:["The ",(0,c.jsx)(t.code,{children:"init"})," method"]}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"init"})," method is called before any calls to the ",(0,c.jsx)(t.code,{children:"main"})," or ",(0,c.jsx)(t.code,{children:"watcher"})," method. It guarantees that the action instance has loaded the correct information from the databases or other external resources."]}),"\n",(0,c.jsxs)(t.h2,{id:"the-main-method",children:["The ",(0,c.jsx)(t.code,{children:"main"})," method"]}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"main"})," method is called once and only once, after the action entered the EXECUTING_MAIN state.\nThe ",(0,c.jsx)(t.code,{children:"main"})," method should return one of these three states: ",(0,c.jsx)(t.code,{children:"SUCCESS"}),", ",(0,c.jsx)(t.code,{children:"ERROR"}),", ",(0,c.jsx)(t.code,{children:"IN_PROGRESS"}),"."]}),"\n",(0,c.jsxs)(t.h2,{id:"the-watcher-method",children:["The ",(0,c.jsx)(t.code,{children:"watcher"})," method"]}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"watcher"})," method is called potentially multiple times when the action is in the IN_PROGRESS state.\nThe ",(0,c.jsx)(t.code,{children:"watcher"})," method should return one of these three states: ",(0,c.jsx)(t.code,{children:"SUCCESS"}),", ",(0,c.jsx)(t.code,{children:"ERROR"}),", ",(0,c.jsx)(t.code,{children:"IN_PROGRESS"}),".\nIt can exceptionally return the ",(0,c.jsx)(t.code,{children:"SLEEPING"})," or ",(0,c.jsx)(t.code,{children:"PAUSED"})," state."]}),"\n",(0,c.jsx)(t.h1,{id:"flow-states-and-steps",children:"Flow states and steps"}),"\n",(0,c.jsx)(t.h3,{id:"actionstatesleeping",children:(0,c.jsx)(t.code,{children:"ActionState.SLEEPING"})}),"\n",(0,c.jsxs)(t.p,{children:["An action begins in the sleeping state. Nothing will happen before a first call to the ",(0,c.jsx)(t.code,{children:"resume"})," method. If your action is saved in the database, the Orbits cron will take care of calling ",(0,c.jsx)(t.code,{children:"resume"})," for you."]}),"\n",(0,c.jsx)(t.h3,{id:"actionstateexecuting_main",children:(0,c.jsx)(t.code,{children:"ActionState.EXECUTING_MAIN"})}),"\n",(0,c.jsxs)(t.p,{children:["Comes just after the ",(0,c.jsx)(t.code,{children:"SLEEPING"})," state and before the call to the ",(0,c.jsx)(t.code,{children:"main"})," method. It acts as a lock: only one process can do the transition from ",(0,c.jsx)(t.code,{children:"SLEEPING"})," to ",(0,c.jsx)(t.code,{children:"EXECUTING_MAIN"}),", ensuring that the ",(0,c.jsx)(t.code,{children:"main"})," method is called once and only once."]}),"\n",(0,c.jsxs)(t.p,{children:["An action can stay in the ",(0,c.jsx)(t.code,{children:"EXECUTING_MAIN"})," state only during only some delay. This timeout is configured via the ",(0,c.jsx)(t.code,{children:"dbDoc.delays[ActionState.EXECUTING_MAIN]"}),". After the timeout expires, a call to the ",(0,c.jsx)(t.code,{children:"watcher"})," method is done."]}),"\n",(0,c.jsxs)(t.p,{children:["See ",(0,c.jsx)(t.a,{href:"/orbits/docs/main-documentation/core-concepts/action#delays",children:"here"})," for more infos on how to configure the delays."]}),"\n",(0,c.jsx)(t.h3,{id:"actionstatein_progress",children:(0,c.jsx)(t.code,{children:"ActionState.IN_PROGRESS"})}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"main"})," and ",(0,c.jsx)(t.code,{children:"watcher"})," methods can send an ",(0,c.jsx)(t.code,{children:"ActionState.IN_PROGRESS"})," to mention that the action is still pending. When an action is in progress, a call to ",(0,c.jsx)(t.code,{children:"resume"})," will call the ",(0,c.jsx)(t.code,{children:"watcher"})," method. As a consequence, the ",(0,c.jsx)(t.code,{children:"watcher"})," method can be called multiple times.\nAn action can stay in the ",(0,c.jsx)(t.code,{children:"IN_PROGRESS"})," state during only some delay. This timeout is configured via the ",(0,c.jsx)(t.code,{children:"dbDoc.delays[ActionState.IN_PROGRESS]"}),". After the timeout expired, the action will enter the ERROR state."]}),"\n",(0,c.jsxs)(t.p,{children:["See ",(0,c.jsx)(t.a,{href:"/orbits/docs/main-documentation/core-concepts/action#delays",children:"here"})," for more infos on how to configure the delays."]}),"\n",(0,c.jsx)(t.h3,{id:"actionstatesuccess",children:(0,c.jsx)(t.code,{children:"ActionState.SUCCESS"})}),"\n",(0,c.jsxs)(t.p,{children:["The action has succeeded. If it is part of a workflow, the workflow will be notified of the success. It then enters the ",(0,c.jsx)(t.code,{children:"CLOSED"})," state."]}),"\n",(0,c.jsx)(t.h3,{id:"actionstateerror",children:(0,c.jsx)(t.code,{children:"ActionState.ERROR"})}),"\n",(0,c.jsxs)(t.p,{children:["The action has failed. If it is part of a workflow, the workflow will be notified of the failure. It then enter the ",(0,c.jsx)(t.code,{children:"CLOSED"})," state."]}),"\n",(0,c.jsx)(t.h3,{id:"actionstateclosed",children:(0,c.jsx)(t.code,{children:"ActionState.CLOSED"})}),"\n",(0,c.jsxs)(t.p,{children:["If no rollback is possible, a ",(0,c.jsx)(t.code,{children:"CLOSED"})," action will be deleted after one day."]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(6540);const c={},i=o.createContext(c);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(i.Provider,{value:t},e.children)}},8708:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/diagramme-746c7cec0ed9406d36ce0c375c8632d2.png"}}]);