"use strict";(self.webpackChunkorbits_doc=self.webpackChunkorbits_doc||[]).push([[7710],{1518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"documentation/quick-start","title":"Quickstart","description":"This is a basic guide to get your first resource working.","source":"@site/docs/documentation/quick-start.md","sourceDirName":"documentation","slug":"/documentation/quick-start","permalink":"/documentation/quick-start","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0.2,"frontMatter":{"sidebar_position":0.2,"title":"Quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Introducing Orbits","permalink":"/documentation/"},"next":{"title":"Installation","permalink":"/category/installation"}}');var s=t(4848),r=t(8453);const i={sidebar_position:.2,title:"Quickstart"},a="Hello world",c={},l=[{value:"Install",id:"install",level:2},{value:"Write your first action",id:"write-your-first-action",level:2},{value:"Use a watcher",id:"use-a-watcher",level:3},{value:"Consume your action",id:"consume-your-action",level:3},{value:"Use the action anywhere you want in your app",id:"use-the-action-anywhere-you-want-in-your-app",level:4},{value:"Workflow: a chain of actions",id:"workflow-a-chain-of-actions",level:2},{value:"Consume your workflow",id:"consume-your-workflow",level:3},{value:"Resources: a complete lifecycle",id:"resources-a-complete-lifecycle",level:2},{value:"Consume your resources",id:"consume-your-resources",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"hello-world",children:"Hello world"})}),"\n",(0,s.jsx)("img",{src:"/img/hello-world.png",alt:"Hello Monkey"}),"\n",(0,s.jsx)(n.p,{children:"This is a basic guide to get your first resource working."}),"\n",(0,s.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(n.p,{children:["Install ",(0,s.jsx)(n.code,{children:"@orbi-ts/core"})," and ",(0,s.jsx)(n.code,{children:"@orbi-ts/fuel"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @orbi-ts/core @orbi-ts/fuel --save\n"})}),"\n",(0,s.jsx)(n.p,{children:"Install it with yarn:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add @orbi-ts/core @orbi-ts/fuel\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"ES modules",type:"info",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@orbi-ts/core"})," and ",(0,s.jsx)(n.code,{children:"@orbi-ts/fuel"})," are published as ES modules.\nIf you're starting a new project from scratch, modify your ",(0,s.jsx)(n.code,{children:"package.json"})," to ensure proper module resolution:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'npm pkg set type="module"\n'})}),(0,s.jsxs)(n.p,{children:["If you're integrating these packages into an existing ESM project, simply import them as usual.",(0,s.jsx)(n.br,{}),"\n","If you're integrating these packages into an existing CommonJS project, refer to this guide on how to use ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/modules/appendices/esm-cjs-interop.html",children:"ES modules from a CommonJS environment"}),"."]})]}),"\n",(0,s.jsx)(n.h2,{id:"write-your-first-action",children:"Write your first action"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.a,{href:"/documentation/core-concepts/action",children:(0,s.jsx)(n.code,{children:"Action"})})," is an object that encapsulates a mutating process."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/orbits/my-action.ts'",children:"import { Action, ActionState } from '@orbi-ts/core';\n\nexport class MyAction extends Action {\n    main() {\n        console.log('hello!');\n        this.setResult('hello!');\n        return ActionState.SUCCESS;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-a-watcher",children:"Use a watcher"}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes, a mutating process doesn't complete immediately. It may involve delays, external systems, or asynchronous validation. In such cases, Orbits allows you to track progress over time using the ",(0,s.jsx)(n.code,{children:"watcher()"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["When your ",(0,s.jsx)(n.code,{children:"main()"})," function returns ",(0,s.jsx)(n.code,{children:"ActionState.IN_PROGRESS"}),", Orbits will continue to invoke ",(0,s.jsx)(n.code,{children:"watcher()"})," periodically to determine whether the action has ultimately succeeded, failed, or is still in progress."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/orbits/my-action.ts'",children:"import { Action, ActionState } from '@orbi-ts/core';\n\nexport class MyAction extends Action {\n    main() {\n        console.log('hello!');\n        this.setResult('hello!');\n        return ActionState.IN_PROGRESS;\n    }\n\n    async watcher() {\n        // In a real scenario, you'd check whether the \"hello\" mutation\n        // has completed (e.g., a message was received, a job succeeded, etc.)\n        // For this example, we just simulate success after 10am.\n        if (new Date().getHours() > 10) {\n            return ActionState.SUCCESS;\n        } else {\n            console.log(\n                'Waiting until after 10am before confirming success...'\n            );\n            return ActionState.IN_PROGRESS;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Using a watcher helps your actions stay reactive and robust, even when their effects unfold over time. This pattern is especially useful when interacting with eventually consistent systems, long-running jobs, or third-party APIs."}),"\n",(0,s.jsx)(n.h3,{id:"consume-your-action",children:"Consume your action"}),"\n",(0,s.jsx)(n.h4,{id:"use-the-action-anywhere-you-want-in-your-app",children:"Use the action anywhere you want in your app"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/anywhere-in-your-app.ts'",children:"import { Action, ActionState } from '@orbi-ts/core';\nimport { MyAction } from 'src/orbits/my-action.js';\n// ...\nawait ActionRuntime.waitForActiveRuntime;\nconst action = new MyAction();\nawait action.save(); // the action will be executed in the background.\nawait Action.trackActionAsPromise(action, [\n    ActionState.SUCCESS,\n    ActionState.ERROR,\n]); // this line is optional.\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configure persistent storage"})}),(0,s.jsxs)(n.p,{children:["To store the state of your actions, a connection to a database is required.\nCurrently, only MongoDB is supported.\nBy default, Orbits attempts to connect to a local MongoDB instance (",(0,s.jsx)(n.code,{children:"localhost"}),").\nTo use a remote MongoDB instance, provide a full MongoDB connection URI via the ",(0,s.jsx)(n.code,{children:"ORBITS_DB__MONGO__URL"})," environment variable.\n",(0,s.jsx)(n.strong,{children:"Example"})," :"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export ORBITS_DB__MONGO__URL='mongodb+srv://orbits:XXXX@myatlas-cluster.mongodb.net/orbits-test?retryWrites=true&w=majority'\n"})})]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["To enable verbose logs while debugging, set the logging level to ",(0,s.jsx)(n.code,{children:"debug"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export ORBITS_LOGGING_LEVEL='debug'\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-a-chain-of-actions",children:"Workflow: a chain of actions"}),"\n",(0,s.jsxs)(n.p,{children:["You will quickly want to exploit the result of your actions and not just launch a process in the background.\nTo do this, you'll need to write a ",(0,s.jsx)(n.a,{href:"/documentation/core-concepts/workflow",children:(0,s.jsx)(n.code,{children:"Workflow"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/orbits/my-workflow.ts'",children:"import { Workflow } from '@orbi-ts/core';\nimport { MyAction } from './my-action.js';\n\nexport class MyWorkflow extends Workflow {\n    declare IArgument: {\n        name: string;\n    };\n\n    async define() {\n        const resultOfMyAction = await this.do('hello', new MyAction());\n        const name = await this.do('name', () => {\n            console.log(`${resultOfMyAction}, ${this.argument.name}!`);\n            return Promise.resolve(this.argument.name);\n        });\n        return `${resultOfMyAction}, ${name}!`;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Of course, you don\u2019t need this level of complexity just to display \u201chello, name\u201d \u2014 this is simply for demonstration purposes.\nHere, using ",(0,s.jsx)(n.code,{children:"this.do"})," we ensure that, for each execution of ",(0,s.jsx)(n.code,{children:"MyWorkflow"}),', the "hello" step is run once and only once. Same, the "name" step is run once and only once.\nThis approach aligns with the ',(0,s.jsx)(n.a,{href:"https://microservices.io/patterns/data/saga.html",children:"SAGA principle"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"consume-your-workflow",children:"Consume your workflow"}),"\n",(0,s.jsx)(n.p,{children:"A workflow is an action, so you consume it like an action:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/anywhere-in-your-app.ts'",children:"import { Action, ActionState } from '@orbi-ts/core';\nimport { MyWorkflow } from 'src/orbits/my-workflow.js';\n// ...\nawait ActionRuntime.waitForActiveRuntime;\nconst workflow = new MyWorkflow().setArgument({ name: 'John Doe' });\nawait workflow.save(); // the action will be executed in the background.\nawait Action.trackActionAsPromise(workflow, [\n    ActionState.SUCCESS,\n    ActionState.ERROR,\n]); // this line is optional.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"resources-a-complete-lifecycle",children:"Resources: a complete lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Greetings occurs only once in a day but if you do:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/consume-workflow.ts'",children:"import { MyWorkflow } from 'src/orbits/my-workflow.js';\n// ...\nconst workflow1 = new MyWorkflow().setArgument({ name: 'John Doe' });\nawait workflow1.save(); // the action will be executed in the background.\n// others processes\nconst workflow2 = new MyWorkflow().setArgument({ name: 'John Doe' });\nawait workflow2.save();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["the workflow will run twice. How to run it only once ?\nThis is managed by the concept of ",(0,s.jsx)(n.a,{href:"/documentation/core-concepts/resource",children:(0,s.jsx)(n.code,{children:"Resource"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/orbits/my-resource.ts'",children:"import { Resource } from '@orbi-ts/core';\nimport { MyWorkflow } from 'src/orbits/my-workflow.js';\n\nexport class MyGreetings extends Resource {\n    declare IArgument: Resource['IArgument'] & {\n        name: string;\n        date: string;\n    };\n\n    identity() {\n        return `${this.argument.name}-${this.argument.date}`;\n    }\n\n    async defineInstall() {\n        // say hello\n        await this.do(\n            'hello',\n            new MyWorkflow().setArgument({\n                name: this.argument.name,\n            })\n        );\n    }\n\n    async defineUpdate() {\n        // do nothing, I have seen you already\n    }\n\n    async defineUninstall() {\n        // say goodbye\n        const goodbye = await this.do('goodbye', () => {\n            console.log('goodbye');\n            return Promise.resolve('goodbye ; it was a great day');\n        });\n        return `${goodbye} ${this.argument.name}`;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"consume-your-resources",children:"Consume your resources"}),"\n",(0,s.jsx)(n.p,{children:"A resource is an action, so you consume it like an action:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='src/anywhere-in-your-app.ts'",children:"import { MyGreetings } from 'src/orbits/my-resource.js';\n// ...\nconst resource = new MyGreetings()\n    .setArgument({\n        name: 'John Doe',\n        date: '01-01-01',\n    })\n    .setCommand('Install');\nawait resource.save(); // the action will be executed in the background. the greetings will appear in the console\nawait Action.trackActionAsPromise(resource, [\n    ActionState.SUCCESS,\n    ActionState.ERROR,\n]);\n\nconst resource2 = new MyGreetings()\n    .setArgument({\n        name: 'John Doe',\n        date: '01-01-01',\n    })\n    .setCommand('Install');\nawait resource2.save(); // the action will be executed but nothing will appear in the console.log, as we already installed the resource\nawait Action.trackActionAsPromise(resource2, [\n    ActionState.SUCCESS,\n    ActionState.ERROR,\n]);\n\nconst resource3 = new MyGreetings()\n    .setArgument({\n        name: 'John Doe',\n        date: '01-01-01',\n    })\n    .setCommand('Uninstall');\nawait resource3.save(); // the action will be executed ; \"goodbye\" will appear in the console\nawait Action.trackActionAsPromise(resource3, [\n    ActionState.SUCCESS,\n    ActionState.ERROR,\n]);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.admonition,{title:"What's Next?",type:"tip",children:[(0,s.jsx)(n.p,{children:"Here are three recommended next steps to continue your journey:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83d\udc4b ",(0,s.jsx)(n.a,{href:"/documentation/guides/hello-world",children:"Hello world example"})]})," - Build your first Orbits application with our step-by-step tutorial and see immediate results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\u2699\ufe0f ",(0,s.jsx)(n.a,{href:"/documentation/core-concepts/",children:"Core concepts"})]})," - Master the fundamental architecture principles and design patterns that power Orbits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83d\udee4\ufe0f ",(0,s.jsx)(n.a,{href:"/documentation/guides/",children:"Guides"})]})," - Explore hands-on tutorials ranging from beginner-friendly to advanced implementation techniques"]}),"\n"]})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);