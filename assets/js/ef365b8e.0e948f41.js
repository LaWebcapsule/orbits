"use strict";(self.webpackChunkorbits_doc=self.webpackChunkorbits_doc||[]).push([[2617],{859:(e,t,s)=>{s.d(t,{A:()=>o});const o=s.p+"assets/images/lighweight-temporal-3bf095564584d734cce5f77a6d78ecb6.png"},7968:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>n});var o=s(8139),a=s(4848),r=s(8453);const i={slug:"workflows-orchestrate-microservices",title:"Write Node.js workflows to orchestrate microservices",authors:["loic","louis"],tags:["orchestration","microservices","saga-pattern","orbits","workflow"]},l="Write Node.js workflows to orchestrate microservices",c={authorsImageUrls:[void 0,void 0]},n=[];function h(e){const t={a:"a",img:"img",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Databases follow the principle of transactions \u2014 a set of changes that must either all succeed or all fail. But when an application interacts with multiple databases or connects to various APIs (as is the case for most applications today), the guarantees of ACID are lost. Workflows, state machines, and the saga pattern help achieve a similar level of reliability, often at the cost of more complex code. Here, we introduce a ",(0,a.jsx)(t.strong,{children:"Node.js"})," framework that makes it easy to write such workflows in TypeScript."]}),"\n",(0,a.jsxs)(t.p,{children:["To follow along, you can find the full source code in ",(0,a.jsx)(t.a,{href:"https://github.com/LaWebcapsule/orbits/tree/main/samples/orchestrate-lambda",children:"Orbit\u2019s GitHub repository"}),"."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"lightweight temporal alternative",src:s(859).A+"",width:"1000",height:"400"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8139:e=>{e.exports=JSON.parse('{"permalink":"/blog/workflows-orchestrate-microservices","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-07-22-orchestate-microservices.md","source":"@site/blog/2025-07-22-orchestate-microservices.md","title":"Write Node.js workflows to orchestrate microservices","description":"Databases follow the principle of transactions \u2014 a set of changes that must either all succeed or all fail. But when an application interacts with multiple databases or connects to various APIs (as is the case for most applications today), the guarantees of ACID are lost. Workflows, state machines, and the saga pattern help achieve a similar level of reliability, often at the cost of more complex code. Here, we introduce a Node.js framework that makes it easy to write such workflows in TypeScript.","date":"2025-07-22T00:00:00.000Z","tags":[{"inline":true,"label":"orchestration","permalink":"/blog/tags/orchestration"},{"inline":true,"label":"microservices","permalink":"/blog/tags/microservices"},{"inline":true,"label":"saga-pattern","permalink":"/blog/tags/saga-pattern"},{"inline":false,"label":"OrbiTS","permalink":"/blog/tags/orbits","description":"Posts related to OrbiTS"},{"inline":true,"label":"workflow","permalink":"/blog/tags/workflow"}],"readingTime":5.65,"hasTruncateMarker":true,"authors":[{"name":"Lo\xefc D\xe9champs","title":"CTO @ Webcapsule","url":"https://github.com/ldechamps","page":{"permalink":"/blog/authors/loic"},"socials":{"linkedin":"https://www.linkedin.com/in/loicdechamps/","github":"https://github.com/ldechamps"},"imageURL":"/img/authors/loic.png","key":"loic"},{"name":"Louis Dussarps","title":"CEO @ Webcapsule","url":"https://github.com/louisdussarps","page":{"permalink":"/blog/authors/louis"},"socials":{"linkedin":"https://www.linkedin.com/in/louisdussarps/","github":"https://github.com/louisdussarps"},"imageURL":"/img/authors/louis.png","key":"louis"}],"frontMatter":{"slug":"workflows-orchestrate-microservices","title":"Write Node.js workflows to orchestrate microservices","authors":["loic","louis"],"tags":["orchestration","microservices","saga-pattern","orbits","workflow"]},"unlisted":false,"prevItem":{"title":"Why orchestration matters?","permalink":"/blog/why-orchestration-matters"},"nextItem":{"title":"Automate deployments of cdk8s template","permalink":"/blog/programmable-cdk8s-deployment"}}')},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var o=s(6540);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);